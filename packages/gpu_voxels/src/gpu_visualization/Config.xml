<?xml version="1.0" encoding="UTF-8"?>

<!--
  The map name can be either the exact name, or an enumarator like:
  voxelmap_#, voxellist_#, primitive_array_# or octree_#
  where # is a counter, starting at 0.

  For bitvector voxelmaps you can specify the color for "all_types" and then overwrite specific SweptVolume IDs by tpye_#.

  For probabilistic maps, an occupancy_threshold can be set, so that only voxels with an
  occupancy >= occupancy_threshold will be drawn. It has to be in the range of -127 to 127.

  If the color is not specified by a word, the RGBA-values will be used instead.
  The RGBA-values should be between 0 and 1.
  Currently supported colors are: black, white, red, green, blue, gray, yellow, cyan, magenta
  To get a darker version of the color add "dark" infront of the name
  (e.g. dark blue), that doesn't work with black or white.
  Also a color blending along the Z-Axis can be realized by defining "color_1" and "color_2" instead of a single color.
-->
<visualizer_context>
<background>
  white
</background>

<!-- ------------- The parameter for the voxel map 0------ -->
<voxelmap_0>
  <!-- only voxels with an occupancy >= occupancy_threshold will be drawn. Has to be in the range of -127 to 127 -->
  <occupancy_threshold> 1 </occupancy_threshold>

  <!--her you can specifie an offset to the voxel map (only effects the visualization)-->
  <!--
      <offset>
      <x> 0 </x>
      <y> 50 </y>
      <z> 0 </z>
      </offset>
  -->
  <!-- definde the colors for the different voxel types -->
  <!-- -------- type FREE ------------- -->
  <type_0>
    <rgba>
      <r> 0 </r>
      <g> 1 </g>
      <b> 0 </b>
    </rgba>
  </type_0>
  <!-- -------- type OCCUPIED -------------- -->
  <type_1>
    <color_1> green     </color_1>
    <color_2> dark blue </color_2>
  </type_1>
  <!-- -------- type COLLISION ----------- -->
  <type_2>
    dark red
  </type_2>
  <!-- -------- type UNKNOWN ---- -->
  <type_3>
    magenta
  </type_3>
  <!-- ------- type SWEPT_VOLUME_START --- -->
  <type_4>
    dark gray
  </type_4>
</voxelmap_0>


<!-- ------------- The parameter for the voxel map 1------ -->
<MyVoxelMap>
  <!-- -------- type FREE ------------- -->
  <type_0>
    <color_1>  green  </color_1>
    <color_2>  green  </color_2>
  </type_0>
  <!-- -------- type OCCUPIED -------------- -->
  <type_1>
    <color_1>  black </color_1>
    <color_2>  red  </color_2>
  </type_1>
  <!-- -------- type COLLISION ----------- -->
  <type_2>
    red
  </type_2>
  <!-- ------- type UNKNOWN ---- -->
  <type_3>
    cyan
  </type_3>
</MyVoxelMap>

<!-- ------------ The parameter for the octree 0------ -->
<octree_0>
  <!-- ------- type FREE ------------- -->
  <type_0>
    red
  </type_0>
  <!-- ------- type OCCUPIED -------------- -->
  <type_1>
    green
  </type_1>
  <!-- ------- type COLLISION ---------- -->
  <type_2>
    yellow
  </type_2>
  <!-- ------- type UNKONW ---- -->
  <type_3>
    red
  </type_3>
  <!-- ------- type SWEPT_VOLUME_START --- -->
  <type_4>
    dark gray
  </type_4>
</octree_0>

<!-- ------------ The parameter for the octree 1------ -->
<octree_1>
  <offset>
    <x> 0 </x>
    <y> 0 </y>
    <z> 0 </z>
  </offset>
  <!-- ------- type FREE ------------- -->
  <type_0>
    red
  </type_0>
  <!-- ------- type OCCUPIED -------------- -->
  <type_1>
    <color_1>  green </color_1>
    <color_2>  red   </color_2>
  </type_1>
  <!-- ------- type COLLISION ----------- -->
  <type_2>
    blue
  </type_2>
  <!-- ------- type UNKONW --- -->
  <type_3>
    red
  </type_3>
  <!-- ------- type SWEPT_VOLUME_START -- -->
  <type_4>
    dark gray
  </type_4>
</octree_1>


<!-- --------------- The parameter for camera------------ -->
<camera>
  <position>
    <x> 0 </x>
    <y> 20 </y>
    <z> -80 </z>
    <!--<x> 8213 </x>
        <y> 8171 </y>
        <z> 7870 </z>-->
  </position>
  <focus>
    <x> 50 </x>
    <y> 0 </y>
    <z> 50 </z>
  </focus>
  <horizontal_angle> 7.93541 </horizontal_angle>
  <vertical_angle> 7.24075  </vertical_angle>
  <field_of_view> 60 </field_of_view>
  <window_width> 1024 </window_width>
  <window_height> 768 </window_height>
</camera>

<!-- --------------- some miscellaneous parameter------------ -->
<miscellaneous>
  <interpolation_repeat> 500 </interpolation_repeat>   <!-- interpolation color repeats after x voxels -->
  <min_view_dim> 200 </min_view_dim>
  <min_xyz_value>   <!--minimal x,y,z value that will be drawn. Input will be treated as unsigned integer-->
    <x> 0 </x>
    <y> 0 </y>
    <z> 0 </z>
  </min_xyz_value>
  <max_xyz_value>    <!--exclusive upper x,y,z boundary. Input will be treated as unsigned integer-->
    <x> -1 </x>
    <y> -1 </y>
    <z> -1 </z>
  </max_xyz_value>
  <max_memory_usage> 0 </max_memory_usage>  <!--In MByte, 0 <=> no limit -->
  <max_fps> 60 </max_fps>  <!--0 <=> no limit -->
  <draw_edges_of_triangles> true </draw_edges_of_triangles>
  <draw_filled_triangles> true </draw_filled_triangles>
  <draw_whole_map> true </draw_whole_map> <!-- disables the view cutting -->
  <grid_distance> 25 </grid_distance> <!-- the distance between two grid lines -->
  <grid_height> 0 </grid_height> <!-- the height where the grid will be drawn -->
  <grid_max_x> 500 </grid_max_x> <!-- the x dimension of the grid -->
  <grid_max_y> 500 </grid_max_y> <!-- the y dimension of the grid -->
  <grid_color> black </grid_color>
  <unit_scale> 1 cm </unit_scale>
</miscellaneous>

<!-- --------------- the parameters for the cubeoid of the primitive list------------ -->
<defaultCuboid>
  cyan
  <position>
    <x> 0 </x>
    <y> 0 </y>
    <z> 0 </z>
  </position>
  <side_length>
    <x> 1 </x>
    <y> 1 </y>
    <z> 1 </z>
  </side_length>
</defaultCuboid>

<!-- --------------- example to insert one cuboid/sphere into the szene------------ -->
<!--
    <cuboid>
    cyan
    <position>
    <x> 0 </x>
    <y> 20 </y>
    <z> 0 </z>
    </position>
    <side_length>
    <x> -100 </x>
    <y> 20 </y>
    <z> 1 </z>
    </side_length>
    </cuboid>
-->

</visualizer_context>
